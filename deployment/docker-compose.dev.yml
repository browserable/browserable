services:
  tasks:
    platform: linux/amd64
    container_name: browserable-tasks
    build: ../tasks
    volumes:
      - ../tasks/views:/tasks/views
      - ../tasks/services:/tasks/services
      - ../tasks/public:/tasks/public
      - ../tasks/routes:/tasks/routes
      - ../tasks/logic:/tasks/logic
      - ../tasks/prompts:/tasks/prompts
      - ../tasks/utils:/tasks/utils
      - ../tasks/agents:/tasks/agents
      - ../tasks/app.js:/tasks/app.js
      - ../tasks/version.js:/tasks/version.js
      - ../tasks/package.json:/tasks/package.json
      - ../tasks/files:/tasks/files
    working_dir: /tasks
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "2003:2003"
      - "2010:2010"
    expose:
      - "2003"
      - "2010"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:2003/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      APP_NAME: Browserable
      NODE_TLS_REJECT_UNAUTHORIZED: "0"
      NEW_RELIC_NO_CONFIG_FILE: 1
      NEW_RELIC_ENABLED: 0
      DOMAIN: localhost:2003
      ROOT_DOMAIN: localhost
      PORT: 2003
      UPPY_PORT: 2010
      DEBUG: 1
      HTTPS_DOMAIN: 0
      NODE_ENV: development
      PW_TEST_SCREENSHOT_NO_FONTS_READY: 1
      PW_TEST_REUSE_CONTEXT: 1
      TASKS_DATABASE_URL: postgresql://supabase_admin:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      TASKS_REDIS_URL: "redis://browserable-redis:6379/"
      MONGODB_URL: "mongodb://mongodb:mongodb@browserable-mongodb:27017/browserable?authSource=admin"
      CORS_DOMAINS: "http://localhost:2001,http://localhost:2003,http://localhost:2004,http://localhost:2005,http://localhost"
      COMPANION_CLIENT_ORIGINS: "http://localhost:2001,http://localhost:2003,http://localhost:2004,http://localhost:2005,http://localhost"
      COMPANION_UPLOAD_URLS: "http://localhost:2001,http://localhost:2003,http://localhost:2004,http://localhost:2005,http://localhost"
      COMPANION_AWS_ACL: "public-read"
      SECRET: please-change-this-secret-key
      APP_URL: http://localhost:2001
      ADMIN_EMAIL: admin@browserable.ai
      COOKIE_UUID_KEY: browserable_uuid
      SMTP_HOST: 
      SMTP_PORT: 
      SMTP_USER: 
      SMTP_PASS: 
      SMTP_FROM:
      S3_ENDPOINT: http://minio:9000
      S3_BUCKET: browserable
      S3_KEY: browserable-storage
      S3_SECRET: secret1234
      S3_PRIVATE_DOMAIN: http://minio:9000
      S3_PUBLIC_DOMAIN: http://localhost:9000
      SINGLE_USER_MODE: 1
      DISCORD_ADMIN_WEBHOOK: 
      OPENAI_API_KEY: 
      CLAUDE_API_KEY: 
      QWEN_API_KEY: 
      GEMINI_API_KEY: 
      DEEPSEEK_API_KEY: 
      STEEL_API_KEY: 
      HYPER_BROWSER_API_KEY:
      BROWSERBASE_API_KEY: 
      BROWSERBASE_PROJECT_ID: 
      BROWSER_CONCURRENCY: 4
      LOCAL_BROWSER_SERVICE_URL: http://host.docker.internal:9221
      BROWSER_WIDTH: 1920 # 1280
      BROWSER_HEIGHT: 1920 # 720
    links:
      - browserable-redis
      - browserable-mongodb
    depends_on:
      db:
        condition: service_healthy
      browserable-redis:
        condition: service_started
      browserable-mongodb:
        condition: service_started
      minio:
        condition: service_healthy
    networks:
      - shared-network

  ui:
    platform: linux/amd64
    container_name: browserable-ui
    build: ../ui
    volumes:
      - ../ui/assets:/ui/assets
      - ../ui/src:/ui/src
      - ../ui/tools:/ui/tools
      - ../ui/build:/ui/build
      - ../ui/package.json:/ui/package.json
      - ../ui/tsconfig.json:/ui/tsconfig.json
      - ../ui/tailwind.config.js:/ui/tailwind.config.js
    working_dir: /ui
    ports:
      - "2001:2001"
    expose:
      - "2001"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:2001"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      NODE_TLS_REJECT_UNAUTHORIZED: "0"
      NEW_RELIC_NO_CONFIG_FILE: 1
      NEW_RELIC_ENABLED: 0
      APP_NAME: Browserable
      DOMAIN: localhost:2001
      ROOT_DOMAIN: localhost
      PORT: 2001
      DEBUG: 1
      HTTPS_DOMAIN: 0
      NODE_ENV: development
      REACT_APP_TASKS_PUBLIC_URL: "http://localhost:2003"
      REACT_APP_UPPY_COMPANION_URL: "http://localhost:2003/companion"
      REACT_APP_S3_ENDPOINT: nyc3.digitaloceanspaces.com
      REACT_APP_SINGLE_USER_MODE: 1
      SECRET: please-change-this-secret-key
      REACT_APP_COOKIE_UUID_KEY: browserable_uuid
      REACT_APP_LOCAL_BROWSER_SERVICE_URL: http://localhost:9221

  docs:
    platform: linux/amd64
    container_name: browserable-docs
    build: ../docs
    volumes:
      - ../docs:/docs
    ports:
      - "2002:3000"
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shared-network
    
  browserable-redis:
    image: redis:6.2.6-alpine
    container_name: browserable-redis
    ports: 
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shared-network

  browserable-mongodb:
    image: mongo:latest
    container_name: browserable-mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongodb
      MONGO_INITDB_ROOT_PASSWORD: mongodb
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "'db.runCommand(\"ping\").ok'", "--quiet"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - mongodb_data:/data/db
    networks:
      - shared-network

  mongo-express:
    image: mongo-express:latest
    container_name: browserable-mongo-express
    restart: always
    ports:
      - "3300:8081"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: mongodb
      ME_CONFIG_MONGODB_ADMINPASSWORD: mongodb
      ME_CONFIG_MONGODB_URL: mongodb://mongodb:mongodb@browserable-mongodb:27017/browserable?authSource=admin
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: pass
    depends_on:
      browserable-mongodb:
        condition: service_healthy
    networks:
      - shared-network

  minio:
    image: minio/minio
    container_name: browserable-minio
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: browserable-storage
      MINIO_ROOT_PASSWORD: secret1234
    command: server --console-address ":9001" /data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 2s
      timeout: 10s
      retries: 5
    volumes:
      - minio_data:/data
    networks:
      - shared-network

  minio-createbucket:
    image: minio/mc
    container_name: browserable-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set browserable-minio http://minio:9000 browserable-storage secret1234;
      /usr/bin/mc mb browserable-minio/browserable;
      /usr/bin/mc anonymous set public browserable-minio/browserable;
      /usr/bin/mc admin user add browserable-minio browserable-s3-user browserable-s3-password;
      /usr/bin/mc admin policy attach browserable-minio readwrite --user browserable-s3-user;
      exit 0;
      "
    networks:
      - shared-network

  pgadmin:
    container_name: browserable-pgadmin
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@browserable.ai
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/misc/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      db:
        condition: service_healthy
    networks:
      - shared-network

  db:
    container_name: supabase-db
    image: supabase/postgres:15.8.1.060
    restart: unless-stopped
    volumes:
      - ./supabase-docker/volumes/db/realtime.sql:/docker-entrypoint-initdb.d/migrations/99-realtime.sql:Z
      - ./supabase-docker/volumes/db/webhooks.sql:/docker-entrypoint-initdb.d/init-scripts/98-webhooks.sql:Z
      - ./supabase-docker/volumes/db/roles.sql:/docker-entrypoint-initdb.d/init-scripts/99-roles.sql:Z
      - ./supabase-docker/volumes/db/jwt.sql:/docker-entrypoint-initdb.d/init-scripts/99-jwt.sql:Z
      - ./supabase-docker/volumes/db/data:/var/lib/postgresql/data:Z
      - ./supabase-docker/volumes/db/_supabase.sql:/docker-entrypoint-initdb.d/migrations/97-_supabase.sql:Z
      - ./supabase-docker/volumes/db/logs.sql:/docker-entrypoint-initdb.d/migrations/99-logs.sql:Z
      - ./supabase-docker/volumes/db/pooler.sql:/docker-entrypoint-initdb.d/migrations/99-pooler.sql:Z
      - ./browserable.sql:/docker-entrypoint-initdb.d/browserable.sql
      - db-config:/etc/postgresql-custom
      - postgresdb:/var/lib/postgresql/data:Z
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      POSTGRES_HOST: /var/run/postgresql
      PGPORT: ${POSTGRES_PORT}
      POSTGRES_PORT: ${POSTGRES_PORT}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB}
      POSTGRES_DB: ${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXP: ${JWT_EXPIRY}
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf", "-c", "log_min_messages=fatal"]
    networks:
      - shared-network

networks:
  shared-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  db-config:
    driver: local
  minio_data:
    driver: local
  postgresdb:
    driver: local